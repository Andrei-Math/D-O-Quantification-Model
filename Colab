{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ANN_code_claims.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOekdDlR8x366qGJYMyidhO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Andrei-Math/ABN/blob/master/ANN_code_claims.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WgrKHgHm5Wp3"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO: correct the way to make Xtrain with correct index and remove NAs\n",
        "Xtrain = pd.read_csv(\"Xtrain.csv\", index_col=0)\n",
        "Xtest = pd.read_csv(\"Xtest.csv\", index_col=0)\n",
        "ytrain = pd.read_csv(\"ytrain.csv\", index_col=0).rename(columns={'V1':'ClaimNb'})\n",
        "ytest = pd.read_csv(\"ytest.csv\", index_col=0).rename(columns={'V1':'ClaimNb'})\n",
        "\n",
        "# store predictions for each model\n",
        "train = pd.DataFrame()\n",
        "test = pd.DataFrame()\n",
        "train['ClaimNb'] = ytrain['ClaimNb']\n",
        "test['ClaimNb'] = ytest['ClaimNb']\n",
        "\n",
        "# store results for each model\n",
        "train_results = pd.DataFrame(index=['poisson deviance'])\n",
        "test_results = pd.DataFrame(index=['poisson deviance'])\n",
        "\n",
        "display(Xtrain.head())\n",
        "print(Xtrain.shape)\n",
        "display(ytrain.head())\n",
        "print('NA in Xtrain = ', (pd.isna(Xtrain)).sum().sum())\n",
        "print(ytrain.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 477
        },
        "id": "8SNh2QYBApiD",
        "outputId": "27084c7c-5a44-462c-d503-c070650673c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   REVENUESX  is_USA_jurisX   R2   R3   R4   R5   R6   R7   R8   R9  ...  S3  \\\n",
              "2  -0.959481            0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0   \n",
              "3  -0.959481            0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0   \n",
              "6  -0.959481            0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  ...   0   \n",
              "7  -0.741298            0.5  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  ...   0   \n",
              "8  -0.415797            0.5  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  ...   0   \n",
              "\n",
              "   S4  S5  S6  S7  S8  S9  S10  S11  S12  \n",
              "2   0   0   0   1   0   0    0    0    0  \n",
              "3   0   0   0   0   1   0    0    0    0  \n",
              "6   1   0   0   0   0   0    0    0    0  \n",
              "7   1   0   0   0   0   0    0    0    0  \n",
              "8   1   0   0   0   0   0    0    0    0  \n",
              "\n",
              "[5 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc9dd64c-e262-4309-89c8-8de14fd61c38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>REVENUESX</th>\n",
              "      <th>is_USA_jurisX</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>R5</th>\n",
              "      <th>R6</th>\n",
              "      <th>R7</th>\n",
              "      <th>R8</th>\n",
              "      <th>R9</th>\n",
              "      <th>...</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>S5</th>\n",
              "      <th>S6</th>\n",
              "      <th>S7</th>\n",
              "      <th>S8</th>\n",
              "      <th>S9</th>\n",
              "      <th>S10</th>\n",
              "      <th>S11</th>\n",
              "      <th>S12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.959481</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.959481</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.959481</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-0.741298</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>-0.415797</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 30 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc9dd64c-e262-4309-89c8-8de14fd61c38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dc9dd64c-e262-4309-89c8-8de14fd61c38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dc9dd64c-e262-4309-89c8-8de14fd61c38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(6498, 30)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   ClaimNb\n",
              "1        1\n",
              "2        1\n",
              "3        1\n",
              "4        1\n",
              "5        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e8d0b55-3767-4eaf-8742-027c4f9b864c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ClaimNb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e8d0b55-3767-4eaf-8742-027c4f9b864c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e8d0b55-3767-4eaf-8742-027c4f9b864c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e8d0b55-3767-4eaf-8742-027c4f9b864c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NA in Xtrain =  544\n",
            "(6498, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Xtrain.columns[Xtrain.nunique() <= 1]\n",
        "# Xtest.columns[Xtest.nunique() <= 1]\n",
        "# if 'R18' in Xtrain:\n",
        "#   Xtrain = Xtrain.drop(columns=['R18'])\n",
        "# for col in Xtrain:\n",
        "#   Xtrain[col] = Xtrain[col].astype('float64')\n",
        "Xtrain = Xtrain.dropna()\n",
        "Xtrain.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "csv8UPl3h573",
        "outputId": "3914b0b3-0738-4b2c-fde6-7e68ee755fcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      REVENUESX  is_USA_jurisX   R2   R3   R4   R5   R6   R7   R8   R9  ...  \\\n",
              "8113  -0.959481           -0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   \n",
              "8114  -0.959398           -0.5  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  ...   \n",
              "8115  -0.959351           -0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   \n",
              "8118  -0.957361            0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   \n",
              "8119  -0.959481            0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  ...   \n",
              "\n",
              "      S3  S4  S5  S6  S7  S8  S9  S10  S11  S12  \n",
              "8113   0   1   0   0   0   0   0    0    0    0  \n",
              "8114   0   1   0   0   0   0   0    0    0    0  \n",
              "8115   0   1   0   0   0   0   0    0    0    0  \n",
              "8118   0   1   0   0   0   0   0    0    0    0  \n",
              "8119   0   1   0   0   0   0   0    0    0    0  \n",
              "\n",
              "[5 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cf1acc5-1ccb-42d5-a458-0c26f81f52de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>REVENUESX</th>\n",
              "      <th>is_USA_jurisX</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>R5</th>\n",
              "      <th>R6</th>\n",
              "      <th>R7</th>\n",
              "      <th>R8</th>\n",
              "      <th>R9</th>\n",
              "      <th>...</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>S5</th>\n",
              "      <th>S6</th>\n",
              "      <th>S7</th>\n",
              "      <th>S8</th>\n",
              "      <th>S9</th>\n",
              "      <th>S10</th>\n",
              "      <th>S11</th>\n",
              "      <th>S12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8113</th>\n",
              "      <td>-0.959481</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8114</th>\n",
              "      <td>-0.959398</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8115</th>\n",
              "      <td>-0.959351</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8118</th>\n",
              "      <td>-0.957361</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8119</th>\n",
              "      <td>-0.959481</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 30 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cf1acc5-1ccb-42d5-a458-0c26f81f52de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4cf1acc5-1ccb-42d5-a458-0c26f81f52de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4cf1acc5-1ccb-42d5-a458-0c26f81f52de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytrain = ytrain.loc[Xtrain.index,:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "ONsFNjrkjvTs",
        "outputId": "ecaf9796-3e8f-4c7e-9e9f-4987251bbb09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-1c3dc574aaf2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mytrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1151\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1095\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1377\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: '[6499, 6500, 6501, 6502, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6539, 6540, 6541, 6542, 6545, 6546, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6561, 6562, 6563, 6564, 6565, 6566, 6568, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6592, 6595, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6614, 6615, 6616, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6634, 6635, 6636, 6637, 6639, 6640, 6641, 6642, 6643, 6644, 6647, 6648, 6650, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6667, 6668, 6669, 6670, 6671, 6672, 6674, 6675, 6676, 6678, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6689, 6692, 6693, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6714, 6715, 6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6732, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6742, 6745, 6747, 6750, 6751, 6752, 6753, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6771, 6772, 6773, 6774, 6776, 6778, 6779, 6780, 6781, 6782, 6783, 6785, 6786, 6787, 6788, 6790, 6791, 6793, 6794, 6796, 6797, 6798, 6799, 6800, 6802, 6803, 6805, 6806..."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Xtrain.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LejN86zOjCkL",
        "outputId": "803f3f88-c7c5-4fe9-9a4e-48b139bf2dba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 6498 entries, 2 to 8119\n",
            "Data columns (total 29 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   REVENUESX      6498 non-null   float64\n",
            " 1   is_USA_jurisX  6498 non-null   float64\n",
            " 2   R2             6466 non-null   float64\n",
            " 3   R3             6466 non-null   float64\n",
            " 4   R4             6466 non-null   float64\n",
            " 5   R5             6466 non-null   float64\n",
            " 6   R6             6466 non-null   float64\n",
            " 7   R7             6466 non-null   float64\n",
            " 8   R8             6466 non-null   float64\n",
            " 9   R9             6466 non-null   float64\n",
            " 10  R10            6466 non-null   float64\n",
            " 11  R11            6466 non-null   float64\n",
            " 12  R12            6466 non-null   float64\n",
            " 13  R13            6466 non-null   float64\n",
            " 14  R14            6466 non-null   float64\n",
            " 15  R15            6466 non-null   float64\n",
            " 16  R16            6466 non-null   float64\n",
            " 17  R17            6466 non-null   float64\n",
            " 18  S2             6498 non-null   float64\n",
            " 19  S3             6498 non-null   float64\n",
            " 20  S4             6498 non-null   float64\n",
            " 21  S5             6498 non-null   float64\n",
            " 22  S6             6498 non-null   float64\n",
            " 23  S7             6498 non-null   float64\n",
            " 24  S8             6498 non-null   float64\n",
            " 25  S9             6498 non-null   float64\n",
            " 26  S10            6498 non-null   float64\n",
            " 27  S11            6498 non-null   float64\n",
            " 28  S12            6498 non-null   float64\n",
            "dtypes: float64(29)\n",
            "memory usage: 1.5 MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import pointbiserialr\n",
        "print('Correlation betwen Revenue and claim count = ', np.corrcoef(Xtrain['REVENUESX'], ytrain['ClaimNb'])[0,1])\n",
        "#print('Correlation betwen Employees and claim count = ', np.corrcoef(Xtrain['EMPLOYEESX'], ytrain['ClaimNb'])[0,1])\n",
        "print('Correlation betwen USA juris and claim count = ', pointbiserialr(Xtrain['is_USA_jurisX'], ytrain['ClaimNb']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cL5g2JZXO1wA",
        "outputId": "a7659123-7ec1-424a-c3a1-476ccc8cc86b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation betwen Revenue and claim count =  0.11602294202052407\n",
            "Correlation betwen USA juris and claim count =  PointbiserialrResult(correlation=0.05435534285129983, pvalue=1.1652426198402238e-05)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q0 = Xtrain.shape[1] # number of input features\n",
        "q1 = 100  # number of neurons in hidden layer"
      ],
      "metadata": {
        "id": "RwqZcUncCkZ1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lambda_hom = sum(ytrain['ClaimNb'])/len(ytrain)\n",
        "lambda_hom"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0m0jYoldGLge",
        "outputId": "cae19f42-1898-403b-e1f2-c9906b761907"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.3054786088027086"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.Sequential()\n",
        "model.add(tf.keras.layers.Dense(q1, input_shape=(q0,), activation='tanh'))\n",
        "model.add(tf.keras.layers.Dense(1, activation='linear', kernel_initializer=tf.keras.initializers.Constant(tf.math.log(lambda_hom)), bias_initializer=tf.keras.initializers.Zeros()))\n",
        "model.add(tf.keras.layers.Dense(1, activation='exponential', trainable=False, kernel_initializer=tf.keras.initializers.Ones(),\n",
        "    bias_initializer=tf.keras.initializers.Zeros()))"
      ],
      "metadata": {
        "id": "05IKtIOsB3Y0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='poisson', optimizer='nadam', metrics=['mse'])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xSlulxzDyqC",
        "outputId": "b67dbf9a-21db-47a2-ffce-46488badd1c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 100)               3000      \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 1)                 101       \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 1)                 2         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 3,103\n",
            "Trainable params: 3,101\n",
            "Non-trainable params: 2\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 300\n",
        "batch_size = 1000\n",
        "validation_split = 0.2  # set to >0 to see train/validation loss in plot(fit)\n",
        "verbose = 1"
      ],
      "metadata": {
        "id": "9vI2jut2FQli"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(Xtrain, ytrain['ClaimNb'], epochs=epochs, batch_size=batch_size, validation_split=validation_split, verbose=verbose)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "iZ821WV7Ht6e",
        "outputId": "5a62e878-7d77-4830-ce69-d82d398880dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "6/6 [==============================] - 1s 44ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 2/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 3/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 4/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 5/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 6/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 7/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 8/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 9/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 10/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 11/300\n",
            "6/6 [==============================] - 0s 12ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 12/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 13/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 14/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 15/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 16/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 17/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 18/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 19/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 20/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 21/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 22/300\n",
            "6/6 [==============================] - 0s 12ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 23/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 24/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 25/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 26/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 27/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 28/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 29/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 30/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 31/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 32/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 33/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 34/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 35/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 36/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 37/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 38/300\n",
            "6/6 [==============================] - 0s 13ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 39/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 40/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 41/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 42/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 43/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 44/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 45/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 46/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 47/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 48/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 49/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 50/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 51/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 52/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 53/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 54/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 55/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 56/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 57/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 58/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 59/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 60/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 61/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 62/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 63/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 64/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 65/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 66/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 67/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 68/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 69/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 70/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 71/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 72/300\n",
            "6/6 [==============================] - 0s 12ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 73/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 74/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 75/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 76/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 77/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 78/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 79/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 80/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 81/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 82/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 83/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 84/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 85/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 86/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 87/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 88/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 89/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 90/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 91/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 92/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 93/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 94/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 95/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 96/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 97/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 98/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 99/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 100/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 101/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 102/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 103/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 104/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 105/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 106/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 107/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 108/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 109/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 110/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 111/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 112/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 113/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 114/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 115/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 116/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 117/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 118/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 119/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 120/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 121/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 122/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 123/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 124/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 125/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 126/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 127/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 128/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 129/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 130/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 131/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 132/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 133/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 134/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 135/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 136/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 137/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 138/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 139/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 140/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 141/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 142/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 143/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 144/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 145/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 146/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 147/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 148/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 149/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 150/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 151/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 152/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 153/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 154/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 155/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 156/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 157/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 158/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 159/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 160/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 161/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 162/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 163/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 164/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 165/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 166/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 167/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 168/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 169/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 170/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 171/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 172/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 173/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 174/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 175/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 176/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 177/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 178/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 179/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 180/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 181/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 182/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 183/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 184/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 185/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 186/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 187/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 188/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 189/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 190/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 191/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 192/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 193/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 194/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 195/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 196/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 197/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 198/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 199/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 200/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 201/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 202/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 203/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 204/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 205/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 206/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 207/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 208/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 209/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 210/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 211/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 212/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 213/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 214/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 215/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 216/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 217/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 218/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 219/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 220/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 221/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 222/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 223/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 224/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 225/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 226/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 227/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 228/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 229/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 230/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 231/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 232/300\n",
            "6/6 [==============================] - 0s 11ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 233/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 234/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 235/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 236/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 237/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 238/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 239/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 240/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 241/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 242/300\n",
            "1/6 [====>.........................] - ETA: 0s - loss: nan - mse: nan"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-179b2ce506ac>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ClaimNb'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_split\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1429\u001b[0m               \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1430\u001b[0m               \u001b[0mreturn_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1431\u001b[0;31m               _use_cached_eval_dataset=True)\n\u001b[0m\u001b[1;32m   1432\u001b[0m           \u001b[0mval_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'val_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1433\u001b[0m           \u001b[0mepoch_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   1708\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_test_counter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1709\u001b[0m       \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1710\u001b[0;31m       \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menumerate_epochs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Single epoch.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1711\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1712\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_stop_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36menumerate_epochs\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1189\u001b[0m     \u001b[0;34m\"\"\"Yields `(epoch, tf.data.Iterator)`.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_truncate_execution_to_epoch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1191\u001b[0;31m       \u001b[0mdata_iterator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1192\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_initial_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1193\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_insufficient_data\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Set by `catch_stop_iteration`.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minside_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    485\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolocate_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variant_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 486\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0miterator_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOwnedIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    487\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m       raise RuntimeError(\"`tf.data.Dataset` only supports Python-style \"\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dataset, components, element_spec)\u001b[0m\n\u001b[1;32m    753\u001b[0m             \u001b[0;34m\"When `dataset` is provided, `element_spec` and `components` must \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    754\u001b[0m             \"not be specified.\")\n\u001b[0;32m--> 755\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    756\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_next_call_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_create_iterator\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    785\u001b[0m                 \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    786\u001b[0m                 output_shapes=self._flat_output_shapes))\n\u001b[0;32m--> 787\u001b[0;31m         \u001b[0mgen_dataset_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds_variant\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    788\u001b[0m         \u001b[0;31m# Delete the resource when this object is deleted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    789\u001b[0m         self._resource_deleter = IteratorResourceDeleter(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36mmake_iterator\u001b[0;34m(dataset, iterator, name)\u001b[0m\n\u001b[1;32m   3314\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3315\u001b[0m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0;32m-> 3316\u001b[0;31m         _ctx, \"MakeIterator\", name, dataset, iterator)\n\u001b[0m\u001b[1;32m   3317\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3318\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "3BMbE3o6ILsI",
        "outputId": "6e4bd567-47b1-4ea8-bd65-24356c7b7687"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f07bae1dd10>]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOpklEQVR4nO3cf6jd9X3H8eeruTRrEUyi8UeN2bVVGHGDFg5K2QauaoyDNtL6h90fDVtL/lj9Y5VCUxzT2v6hbp2ltNsIbSEIa3SO0kApEm2FMYb1xDrarE1zjS0mVZuaIDipkvW9P+7X7Xg5Mffec+49OX6eDzjc8/1+P/fe98cLeeac742pKiRJ7XrbpAeQJE2WIZCkxhkCSWqcIZCkxhkCSWrczKQHWI7zzz+/ZmdnJz2GJE2VAwcO/LqqNi48P5UhmJ2dpd/vT3oMSZoqSX4x7LxvDUlS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS48YSgiTbkhxKMpdk15Dra5M80F1/PMnsguubk7yc5NPjmEeStHgjhyDJGuCrwI3AFuCjSbYsWPZx4GRVXQ7cB9yz4PrfA98ddRZJ0tKN4xXBVcBcVR2pqteAvcD2BWu2A3u65w8B1yYJQJKbgGeAg2OYRZK0ROMIwSXAswPHR7tzQ9dU1SngJeC8JOcAnwE+d6ZvkmRnkn6S/vHjx8cwtiQJJn+z+E7gvqp6+UwLq2p3VfWqqrdx48aVn0ySGjEzhq9xDLh04HhTd27YmqNJZoBzgReBq4Gbk9wLrAN+m+Q3VfWVMcwlSVqEcYTgCeCKJJcx/wf+LcCfLVizD9gB/AdwM/C9qirgj19fkORO4GUjIEmra+QQVNWpJLcCDwNrgG9U1cEkdwH9qtoHfB24P8kccIL5WEiSzgKZ/4v5dOn1etXv9yc9hiRNlSQHqqq38PykbxZLkibMEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS4wyBJDXOEEhS48YSgiTbkhxKMpdk15Dra5M80F1/PMlsd/76JAeS/Kj7+IFxzCNJWryRQ5BkDfBV4EZgC/DRJFsWLPs4cLKqLgfuA+7pzv8a+GBV/QGwA7h/1HkkSUszjlcEVwFzVXWkql4D9gLbF6zZDuzpnj8EXJskVfXDqvpld/4g8I4ka8cwkyRpkcYRgkuAZweOj3bnhq6pqlPAS8B5C9Z8BHiyql4dw0ySpEWamfQAAEmuZP7toq1vsmYnsBNg8+bNqzSZJL31jeMVwTHg0oHjTd25oWuSzADnAi92x5uAbwEfq6qnT/dNqmp3VfWqqrdx48YxjC1JgvGE4AngiiSXJXk7cAuwb8GafczfDAa4GfheVVWSdcB3gF1V9e9jmEWStEQjh6B7z/9W4GHgJ8CDVXUwyV1JPtQt+zpwXpI54Dbg9V8xvRW4HPibJE91jwtGnUmStHipqknPsGS9Xq/6/f6kx5CkqZLkQFX1Fp73XxZLUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuMMgSQ1zhBIUuPGEoIk25IcSjKXZNeQ62uTPNBdfzzJ7MC1z3bnDyW5YRzzSJIWb+QQJFkDfBW4EdgCfDTJlgXLPg6crKrLgfuAe7rP3QLcAlwJbAP+oft6kqRVMo5XBFcBc1V1pKpeA/YC2xes2Q7s6Z4/BFybJN35vVX1alU9A8x1X0+StErGEYJLgGcHjo9254auqapTwEvAeYv8XACS7EzST9I/fvz4GMaWJMEU3Syuqt1V1auq3saNGyc9jiS9ZYwjBMeASweON3Xnhq5JMgOcC7y4yM+VJK2gcYTgCeCKJJcleTvzN3/3LVizD9jRPb8Z+F5VVXf+lu63ii4DrgB+MIaZJEmLNDPqF6iqU0luBR4G1gDfqKqDSe4C+lW1D/g6cH+SOeAE87GgW/cg8F/AKeCTVfU/o84kSVq8zP/FfLr0er3q9/uTHkOSpkqSA1XVW3h+am4WS5JWhiGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMaNFIIkG5LsT3K4+7j+NOt2dGsOJ9nRnXtnku8k+WmSg0nuHmUWSdLyjPqKYBfwaFVdATzaHb9Bkg3AHcDVwFXAHQPB+Luq+j3gfcAfJrlxxHkkSUs0agi2A3u653uAm4asuQHYX1UnquoksB/YVlWvVNX3AarqNeBJYNOI80iSlmjUEFxYVc91z58HLhyy5hLg2YHjo925/5NkHfBB5l9VSJJW0cyZFiR5BLhoyKXbBw+qqpLUUgdIMgN8E/hyVR15k3U7gZ0AmzdvXuq3kSSdxhlDUFXXne5akheSXFxVzyW5GPjVkGXHgGsGjjcBjw0c7wYOV9WXzjDH7m4tvV5vycGRJA036ltD+4Ad3fMdwLeHrHkY2JpkfXeTeGt3jiRfAM4F/mrEOSRJyzRqCO4Grk9yGLiuOyZJL8nXAKrqBPB54InucVdVnUiyifm3l7YATyZ5KsknRpxHkrREqZq+d1l6vV71+/1JjyFJUyXJgarqLTzvvyyWpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMYZAklqnCGQpMaNFIIkG5LsT3K4+7j+NOt2dGsOJ9kx5Pq+JD8eZRZJ0vKM+opgF/BoVV0BPNodv0GSDcAdwNXAVcAdg8FI8mHg5RHnkCQt06gh2A7s6Z7vAW4asuYGYH9Vnaiqk8B+YBtAknOA24AvjDiHJGmZRg3BhVX1XPf8eeDCIWsuAZ4dOD7anQP4PPBF4JUzfaMkO5P0k/SPHz8+wsiSpEEzZ1qQ5BHgoiGXbh88qKpKUov9xkneC7ynqj6VZPZM66tqN7AboNfrLfr7SJLe3BlDUFXXne5akheSXFxVzyW5GPjVkGXHgGsGjjcBjwHvB3pJft7NcUGSx6rqGiRJq2bUt4b2Aa//FtAO4NtD1jwMbE2yvrtJvBV4uKr+sareVVWzwB8BPzMCkrT6Rg3B3cD1SQ4D13XHJOkl+RpAVZ1g/l7AE93jru6cJOkskKrpe7u91+tVv9+f9BiSNFWSHKiq3sLz/stiSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxhkCSWqcIZCkxqWqJj3DkiU5Dvxi0nMs0fnAryc9xCpzz21wz9Pjd6tq48KTUxmCaZSkX1W9Sc+xmtxzG9zz9POtIUlqnCGQpMYZgtWze9IDTIB7boN7nnLeI5CkxvmKQJIaZwgkqXGGYIySbEiyP8nh7uP606zb0a05nGTHkOv7kvx45Sce3Sh7TvLOJN9J8tMkB5PcvbrTL02SbUkOJZlLsmvI9bVJHuiuP55kduDaZ7vzh5LcsJpzj2K5e05yfZIDSX7UffzAas++HKP8jLvrm5O8nOTTqzXzWFSVjzE9gHuBXd3zXcA9Q9ZsAI50H9d3z9cPXP8w8M/Ajye9n5XeM/BO4E+6NW8H/g24cdJ7Os0+1wBPA+/uZv1PYMuCNX8J/FP3/Bbgge75lm79WuCy7uusmfSeVnjP7wPe1T3/feDYpPezkvsduP4Q8C/Apye9n6U8fEUwXtuBPd3zPcBNQ9bcAOyvqhNVdRLYD2wDSHIOcBvwhVWYdVyWveeqeqWqvg9QVa8BTwKbVmHm5bgKmKuqI92se5nf+6DB/xYPAdcmSXd+b1W9WlXPAHPd1zvbLXvPVfXDqvpld/4g8I4ka1dl6uUb5WdMkpuAZ5jf71QxBON1YVU91z1/HrhwyJpLgGcHjo925wA+D3wReGXFJhy/UfcMQJJ1wAeBR1diyDE44x4G11TVKeAl4LxFfu7ZaJQ9D/oI8GRVvbpCc47Lsvfb/SXuM8DnVmHOsZuZ9ADTJskjwEVDLt0+eFBVlWTRv5ub5L3Ae6rqUwvfd5y0ldrzwNefAb4JfLmqjixvSp2NklwJ3ANsnfQsK+xO4L6qerl7gTBVDMESVdV1p7uW5IUkF1fVc0kuBn41ZNkx4JqB403AY8D7gV6SnzP/c7kgyWNVdQ0TtoJ7ft1u4HBVfWkM466UY8ClA8ebunPD1hzt4nYu8OIiP/dsNMqeSbIJ+Bbwsap6euXHHdko+70auDnJvcA64LdJflNVX1n5scdg0jcp3koP4G95443Te4es2cD8+4jru8czwIYFa2aZnpvFI+2Z+fsh/wq8bdJ7OcM+Z5i/yX0Z/38j8coFaz7JG28kPtg9v5I33iw+wnTcLB5lz+u69R+e9D5WY78L1tzJlN0snvgAb6UH8++NPgocBh4Z+MOuB3xtYN1fMH/DcA748yFfZ5pCsOw9M/83rgJ+AjzVPT4x6T29yV7/FPgZ879Zcnt37i7gQ93z32H+N0bmgB8A7x743Nu7zzvEWfqbUePcM/DXwH8P/FyfAi6Y9H5W8mc88DWmLgT+LyYkqXH+1pAkNc4QSFLjDIEkNc4QSFLjDIEkNc4QSFLjDIEkNe5/AecL/ch2b2HBAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PoissonDeviance = tf.keras.metrics.poisson\n",
        "\n",
        "train['shNN'] = model.predict(Xtrain)\n",
        "test['shNN'] = model.predict(Xtest)\n",
        "\n",
        "in_sample_loss = PoissonDeviance(train['ClaimNb'], train['shNN'])\n",
        "out_sample_loss = PoissonDeviance(test['ClaimNb'], test['shNN'])\n",
        "print(f\"Poisson deviance shallow network (train): {in_sample_loss.numpy() :.3f}\" )\n",
        "print(f\"Poisson deviance shallow network (test): {out_sample_loss.numpy() :.3f}\" )\n",
        "\n",
        "train_results['shNN'] = [in_sample_loss]\n",
        "test_results['shNN'] = [out_sample_loss]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p_snj-yJInKS",
        "outputId": "9f38e2e1-d3bd-4554-c0e1-381724902557"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Poisson deviance shallow network (train): nan\n",
            "Poisson deviance shallow network (test): nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "shNN_frequency = sum(test['shNN']) / len(test)\n",
        "print(f\"Average frequency (test): {shNN_frequency: .3f}\" )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thWyL7V-KY3f",
        "outputId": "17ec3181-583c-4aff-c4b4-6e79778256c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average frequency (test):  nan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_df = Xtest.copy()\n",
        "plot_df['ClaimNb'] = test['ClaimNb']\n",
        "plot_df['shNN'] = test['shNN']\n",
        "\n",
        "grouped_data = plot_df.groupby(by=['is_USA_jurisX']).mean()\n",
        "ax = grouped_data.plot(y='ClaimNb', marker='o')\n",
        "grouped_data.plot(y='shNN', marker='x', ax=ax);\n",
        "\n",
        "grouped_data = plot_df.groupby(by=['R2','R3']).mean()\n",
        "ax2 = grouped_data.plot(y='ClaimNb', marker='o')\n",
        "grouped_data.plot(y='shNN', marker='x', ax=ax2);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "zUAlHxIyRZSN",
        "outputId": "0b53be4d-c525-42f6-b0cf-e47baaf68d64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deep vanillha neural network"
      ],
      "metadata": {
        "id": "y0OPO7e8lQu6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# define network\n",
        "q0 = Xtrain.shape[1]   # dimension of features\n",
        "q1 = 20                 # number of neurons in first hidden layer\n",
        "q2 = 15                 # number of neurons in second hidden layer\n",
        "q3 = 10                 # number of neurons in second hidden layer\n",
        "\n",
        "print(\"Neural network with K=3 hidden layer\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HanG5xdATkOO",
        "outputId": "735f5786-3b10-47f5-dafa-ba2a61aed6d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Neural network with K=3 hidden layer\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = tf.keras.Sequential()\n",
        "model2.add(tf.keras.layers.Dense(q1, input_shape=(q0,), activation='tanh'))\n",
        "model2.add(tf.keras.layers.Dense(q2, activation='tanh'))\n",
        "model2.add(tf.keras.layers.Dense(q3, activation='tanh'))\n",
        "model2.add(tf.keras.layers.Dense(1, activation='linear', kernel_initializer=tf.keras.initializers.Constant(tf.math.log(lambda_hom)), bias_initializer=tf.keras.initializers.Zeros()))\n",
        "model2.add(tf.keras.layers.Dense(1, activation='exponential', trainable=False, kernel_initializer=tf.keras.initializers.Ones(),\n",
        "    bias_initializer=tf.keras.initializers.Zeros()))"
      ],
      "metadata": {
        "id": "81zq2sfkl36D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model2.compile(loss='poisson', optimizer='nadam', metrics=['mse'])\n",
        "model2.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af9c6f0c-0979-4c11-b4e6-bf5ff1fa0a15",
        "id": "afQ9sdRRl36D"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_6 (Dense)             (None, 20)                620       \n",
            "                                                                 \n",
            " dense_7 (Dense)             (None, 15)                315       \n",
            "                                                                 \n",
            " dense_8 (Dense)             (None, 10)                160       \n",
            "                                                                 \n",
            " dense_9 (Dense)             (None, 1)                 11        \n",
            "                                                                 \n",
            " dense_10 (Dense)            (None, 1)                 2         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,108\n",
            "Trainable params: 1,106\n",
            "Non-trainable params: 2\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 300\n",
        "batch_size = 1000\n",
        "validation_split = 0.2  # set to >0 to see train/validation loss in plot(fit)\n",
        "verbose = 1"
      ],
      "metadata": {
        "id": "Zd4lxFH6l36E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model2.fit(Xtrain, ytrain['ClaimNb'], epochs=epochs, batch_size=batch_size, validation_split=validation_split, verbose=verbose)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "635820c5-bee7-43f6-de55-86d956d42d84",
        "id": "mAk-Qgv4l36F"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/300\n",
            "6/6 [==============================] - 1s 40ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 2/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 3/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 4/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 5/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 6/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 7/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 8/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 9/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 10/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 11/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 12/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 13/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 14/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 15/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 16/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 17/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 18/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 19/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 20/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 21/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 22/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 23/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 24/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 25/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 26/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 27/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 28/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 29/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 30/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 31/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 32/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 33/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 34/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 35/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 36/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 37/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 38/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 39/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 40/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 41/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 42/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 43/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 44/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 45/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 46/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 47/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 48/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 49/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 50/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 51/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 52/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 53/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 54/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 55/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 56/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 57/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 58/300\n",
            "6/6 [==============================] - 0s 12ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 59/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 60/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 61/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 62/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 63/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 64/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 65/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 66/300\n",
            "6/6 [==============================] - 0s 13ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 67/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 68/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 69/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 70/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 71/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 72/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 73/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 74/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 75/300\n",
            "6/6 [==============================] - 0s 10ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 76/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 77/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 78/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 79/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 80/300\n",
            "6/6 [==============================] - 0s 9ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 81/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 82/300\n",
            "6/6 [==============================] - 0s 8ms/step - loss: nan - mse: nan - val_loss: nan - val_mse: nan\n",
            "Epoch 83/300\n",
            "1/6 [====>.........................] - ETA: 0s - loss: nan - mse: nan"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-989096e0b8fe>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ClaimNb'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_split\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1429\u001b[0m               \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1430\u001b[0m               \u001b[0mreturn_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1431\u001b[0;31m               _use_cached_eval_dataset=True)\n\u001b[0m\u001b[1;32m   1432\u001b[0m           \u001b[0mval_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'val_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1433\u001b[0m           \u001b[0mepoch_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   1708\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_test_counter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1709\u001b[0m       \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1710\u001b[0;31m       \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menumerate_epochs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Single epoch.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1711\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1712\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_stop_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36menumerate_epochs\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1189\u001b[0m     \u001b[0;34m\"\"\"Yields `(epoch, tf.data.Iterator)`.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_truncate_execution_to_epoch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1191\u001b[0;31m       \u001b[0mdata_iterator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1192\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_initial_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1193\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_insufficient_data\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Set by `catch_stop_iteration`.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minside_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    485\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolocate_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variant_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 486\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0miterator_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOwnedIterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    487\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m       raise RuntimeError(\"`tf.data.Dataset` only supports Python-style \"\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dataset, components, element_spec)\u001b[0m\n\u001b[1;32m    753\u001b[0m             \u001b[0;34m\"When `dataset` is provided, `element_spec` and `components` must \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    754\u001b[0m             \"not be specified.\")\n\u001b[0;32m--> 755\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    756\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_next_call_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_create_iterator\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    785\u001b[0m                 \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    786\u001b[0m                 output_shapes=self._flat_output_shapes))\n\u001b[0;32m--> 787\u001b[0;31m         \u001b[0mgen_dataset_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds_variant\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    788\u001b[0m         \u001b[0;31m# Delete the resource when this object is deleted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    789\u001b[0m         self._resource_deleter = IteratorResourceDeleter(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36mmake_iterator\u001b[0;34m(dataset, iterator, name)\u001b[0m\n\u001b[1;32m   3314\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3315\u001b[0m       _result = pywrap_tfe.TFE_Py_FastPathExecute(\n\u001b[0;32m-> 3316\u001b[0;31m         _ctx, \"MakeIterator\", name, dataset, iterator)\n\u001b[0m\u001b[1;32m   3317\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3318\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])"
      ],
      "metadata": {
        "id": "nw3iBipdl36F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "PoissonDeviance = tf.keras.metrics.poisson\n",
        "\n",
        "train['dpNN'] = model2.predict(Xtrain)\n",
        "test['dpNN'] = model2.predict(Xtest)\n",
        "\n",
        "in_sample_loss = PoissonDeviance(train['ClaimNb'], train['dpNN'])\n",
        "out_sample_loss = PoissonDeviance(test['ClaimNb'], test['dpNN'])\n",
        "print(f\"Poisson deviance shallow network (train): {in_sample_loss.numpy() :.3f}\" )\n",
        "print(f\"Poisson deviance shallow network (test): {out_sample_loss.numpy() :.3f}\" )\n",
        "\n",
        "train_results['dpNN'] = [in_sample_loss]\n",
        "test_results['dpNN'] = [out_sample_loss]"
      ],
      "metadata": {
        "id": "TcawO5Yml36F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dpNN_frequency = sum(test['dpNN']) / len(test)\n",
        "print(f\"Average frequency (test): {dpNN_frequency: .3f}\" )"
      ],
      "metadata": {
        "id": "Q8dq_OG0l36F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " # Deep neural network with dropout layers"
      ],
      "metadata": {
        "id": "6Ku5pJkbRrY9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "q0 = Xtrain.shape[1]   # dimension of features\n",
        "q1 = 20                 # number of neurons in first hidden layer\n",
        "q2 = 15                 # number of neurons in second hidden layer\n",
        "q3 = 10                 # number of neurons in second hidden layer\n",
        "p0 = 0.05               # dropout rate     "
      ],
      "metadata": {
        "id": "NX2Yxsd3n38q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model3 = tf.keras.Sequential()\n",
        "model3.add(tf.keras.layers.Dense(q1, input_shape=(q0,), activation='tanh'))\n",
        "model3.add(tf.keras.layers.Dropout(p0))\n",
        "model3.add(tf.keras.layers.Dense(q2, activation='tanh'))\n",
        "model3.add(tf.keras.layers.Dropout(p0))\n",
        "model3.add(tf.keras.layers.Dense(q3, activation='tanh'))\n",
        "model3.add(tf.keras.layers.Dropout(p0))\n",
        "model3.add(tf.keras.layers.Dense(1, activation='linear', kernel_initializer=tf.keras.initializers.Constant(tf.math.log(lambda_hom)), bias_initializer=tf.keras.initializers.Zeros()))\n",
        "model3.add(tf.keras.layers.Dense(1, activation='exponential', trainable=False, kernel_initializer=tf.keras.initializers.Ones(),\n",
        "    bias_initializer=tf.keras.initializers.Zeros()))"
      ],
      "metadata": {
        "id": "PV90cMAzUDiB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model3.compile(loss='poisson', optimizer='nadam', metrics=['mse'])\n",
        "model3.summary()"
      ],
      "metadata": {
        "id": "ZQaicqgLUDiK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 500\n",
        "batch_size = 1000\n",
        "validation_split = 0.2  # set to >0 to see train/validation loss in plot(fit)\n",
        "verbose = 1"
      ],
      "metadata": {
        "id": "6utKOUvDUDiL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model3.fit(Xtrain, ytrain['ClaimNb'], epochs=epochs, batch_size=batch_size, validation_split=validation_split, verbose=verbose)"
      ],
      "metadata": {
        "id": "yStJKzXGUDiM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])"
      ],
      "metadata": {
        "id": "3O32MGhrUDiM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "PoissonDeviance = tf.keras.metrics.poisson\n",
        "\n",
        "train['drNN'] = model3.predict(Xtrain)\n",
        "test['drNN'] = model3.predict(Xtest)\n",
        "\n",
        "in_sample_loss = PoissonDeviance(train['ClaimNb'], train['drNN'])\n",
        "out_sample_loss = PoissonDeviance(test['ClaimNb'], test['drNN'])\n",
        "print(f\"Poisson deviance shallow network (train): {in_sample_loss.numpy() :.3f}\" )\n",
        "print(f\"Poisson deviance shallow network (test): {out_sample_loss.numpy() :.3f}\" )\n",
        "\n",
        "train_results['drNN'] = [in_sample_loss]\n",
        "test_results['drNN'] = [out_sample_loss]"
      ],
      "metadata": {
        "id": "cl0YySyoUDiN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "drNN_frequency = sum(test['drNN']) / len(test)\n",
        "print(f\"Average frequency (test): {drNN_frequency: .3f}\" )"
      ],
      "metadata": {
        "id": "ut8q9W1_UX9n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# MOdel comparison\n"
      ],
      "metadata": {
        "id": "WkwInFdFVl4N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# In sample performance\n",
        "pd.DataFrame(train_results)"
      ],
      "metadata": {
        "id": "bdUo1jvkVuZo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Out of sample performance\n",
        "pd.DataFrame(test_results)"
      ],
      "metadata": {
        "id": "etJ23HPgVu-4"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
